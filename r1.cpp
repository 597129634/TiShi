C语言如何产生随机数

基本函数
int rand(void);
void srand(unsigned int n);
rand() 函数和 srand() 函数声明在 stdlib.h 头文件中

如何使用
rand()函数返回 0 到 RAND_MAX 之间的伪随机数
RAND_MAX常量被定义在stdlib.h头文件中，其值至少为32767

srand()函数使用自变量n作为种子，用来初始化随机数生成器，
只要把相同的种子传入srand()，然后调用rand()时就会产生相同的随机数序列
可以把时间作为srand()的种子避免重复的发生
如果调用rand()之前没有先调用srand()，就和事先调用srand(1)产生的结果一样

for (int i = 0; i < 10; i++)
	printf("%d", rand % 10);
//每次运行都将输出：1 7 4 0 9 4 8 8 2 4 

srand(1);
for (int i = 0; i<10; i++)
	printf("%d ", rand() % 10);
//每次运行都将输出：1 7 4 0 9 4 8 8 2 4
//例2的输出结果与例1是完全一样的。

srand(8);
for (int i = 0; i<10; i++)
	printf("%d ", rand() % 10);
//每次运行都将输出：4 0 1 3 5 3 7 7 1 5
//该程序取得的随机值也是在[0, 10）之间，与srand(1)所取得的值不同，但是每次运行程序的结果都相同。

srand((unsigned)time(NULL));
for (int i = 0; i<10; i++)
	printf("%d ", rand() % 10);
//该程序每次运行结果都不一样，因为每次启动程序的时间都不同。另外需要注意的是，使用time()函数前必须包含头文件time.h。


注意事项
1 如何求一定范围内的随机数
如要取[0, 10)之间的随机整数，需将rand()的返回值与10求模。
randnumber = rand() % 10;
那么，如果取的值不是从0开始呢？你只需要记住一个通用的公式。
要取[a, b)之间的随机整数（包括a，但不包括b)，使用：
(rand() % (b - a)) + a

2 伪随机浮点数。
要取得0～1之间的浮点数，可以用：
rand() / (double)(RAND_MAX)
如果想取更大范围的随机浮点数，比如0～100，可以采用如下方法:
rand() / ((double)(RAND_MAX) / 100)
其他情况，以此类推，这里不作详细说明


/*************测试代码***************/
#include<stdlib.h>
#include<stdio.h>
#include<time.h>
#define MAX 100
int main(void)
{
	srand(time(NULL));
	/*NOTE
	可以用stdlib.h 中的srand函数初始化随机数种子。
	如果需要程序每次执行时使用一个不同的种子，可以用time.h中的time(NULL)为参数调用srand
	一般来说，只在程序执行的开头调用一次srand
	*/

	for (int i = 0; i < MAX; i++)
	{
		if (i % 10 == 0)
			printf("\n");

		printf("%d ", rand() % MAX);
	}

	printf("\n/************************************/\n");
	for (int i = 0; i < MAX; i++)
	{
		if (i % 10 == 0)
			printf("\n");

		printf("%d ", rand() % (MAX - 50) + 50);
	}

	printf("\n/***************************************/\n");
	printf("0-1之间的浮点数100个\n");
	for (int i = 0; i < MAX; i++)
	{
		if (i % 10 == 0)
			printf("\n");
		printf("%lf ", rand() / (double)(RAND_MAX));
	}

	printf("\n/*************************************/\n");
	printf("0--100之间的浮点数100个\n");
	for (int i = 0; i<MAX; i++)
	{
		if (i % 10 == 0)
			putchar(10);
		printf("%lf ", rand() / ((double)(RAND_MAX) / 100));
	}

	return 0;
}
//运行结果

47 15 87 15 42 77 48 22 39 38
23 15 62 63 19 55 89 56 16 79
41 52 31 94 33 77 18 38 33 45
95 47 18 56 58 81 74 58 73 39
74 79 96 35 0 21 37 24 54 51
33 29 10 84 64 72 51 41 22 44
44 50 59 34 52 46 0 58 41 78
1 92 9 76 21 25 38 0 1 44
61 39 61 52 94 86 65 12 89 77
59 92 36 85 12 25 67 18 84 84
/************************************/

80 77 83 83 91 69 79 73 56 66
94 60 71 75 58 57 83 54 76 78
54 67 78 60 53 80 83 60 69 84
76 97 62 85 89 54 98 64 72 98
58 53 56 57 62 83 61 85 95 66
80 77 94 63 52 71 67 90 55 73
58 98 80 73 58 67 79 92 73 54
59 93 88 98 52 53 60 74 90 55
52 75 86 78 98 50 78 58 68 69
73 62 86 61 72 54 52 91 92 81
/***************************************/
0 - 1之间的浮点数100个

0.270852 0.880581 0.349162 0.069094 0.975097 0.231117 0.527055 0.989624 0.423475 0.539628
0.790887 0.178930 0.266610 0.716086 0.325236 0.839595 0.128147 0.696890 0.399640 0.427259
0.348369 0.838496 0.312387 0.444075 0.730064 0.305216 0.352123 0.178808 0.442427 0.982604
0.183233 0.175939 0.739463 0.947020 0.561327 0.714072 0.649037 0.023560 0.784967 0.075686
0.288858 0.462996 0.790033 0.889157 0.965972 0.268838 0.292978 0.324015 0.715018 0.206366
0.889035 0.421247 0.433119 0.024445 0.511765 0.339549 0.265877 0.921476 0.160375 0.798700
0.402081 0.786584 0.300607 0.501572 0.932707 0.247749 0.845790 0.816004 0.930540 0.057741
0.124332 0.497452 0.407025 0.848842 0.739708 0.734153 0.301950 0.788476 0.729209 0.295541
0.162847 0.166173 0.927854 0.065706 0.670003 0.443495 0.943632 0.742729 0.663442 0.798151
0.650258 0.985107 0.828150 0.693289 0.603870 0.787072 0.693533 0.503861 0.289651 0.363414
/*************************************/
0--100之间的浮点数100个

10.403760 73.036897 60.499893 32.541887 81.627857 83.214820 48.487808 42.899869 37.940611 21.076083
7.654042 67.629017 95.532090 37.534715 36.890774 5.230873 23.407697 82.049013 68.337046 67.723624
10.171819 64.839625 93.230995 65.623951 21.591845 46.668905 5.127110 40.766625 14.627522 59.248634
51.139866 75.112156 23.523667 9.442427 31.800287 53.645436 83.617664 70.418409 40.177618 9.503464
8.423109 12.778100 80.892361 29.462569 85.723441 78.926969 59.624012 47.889645 8.160649 53.645436
83.770257 7.303079 4.092532 34.156316 64.836573 13.657033 84.215827 52.690207 63.234352 64.488662
69.646290 54.704428 66.066469 78.014466 17.102573 85.915708 38.566240 1.355022 6.753746 91.244240
39.783929 25.989563 8.374279 78.783532 43.137913 88.521989 91.482284 51.942503 52.513199 84.966582
95.022431 62.877285 54.460280 76.631977 22.251045 90.337840 97.161779 15.686514 76.458022 95.040742
36.780908 68.648335 3.076266 55.726798 41.831721 65.773492 53.962828 38.999603 96.157720 54.609821